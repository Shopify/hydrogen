// tsup.config.ts
import path from "node:path";
import { rmSync } from "node:fs";
import { cp as copy } from "node:fs/promises";
import { defineConfig } from "tsup";

// src/lib/process.ts
import { exec } from "node:child_process";
import { promisify } from "node:util";
var execAsync = promisify(exec);

// src/lib/build.ts
import { fileURLToPath } from "node:url";
import { findPathUp } from "@shopify/cli-kit/node/fs";
import { AbortError } from "@shopify/cli-kit/node/error";
import { dirname, joinPath } from "@shopify/cli-kit/node/path";
var __injected_import_meta_url__ = "file:///Users/juanp.prieto/github.com/Shopify/hydrogen/packages/cli/src/lib/build.ts";
var monorepoPackagesPath = new URL("../../..", __injected_import_meta_url__).pathname;
var isHydrogenMonorepo = monorepoPackagesPath.endsWith(
  "/hydrogen/packages/"
);
var ASSETS_DIR_PREFIX = "assets/hydrogen";
var ASSETS_STARTER_DIR = "starter";
function getSkeletonSourceDir() {
  if (!isHydrogenMonorepo) {
    throw new AbortError(
      "Trying to use skeleton source dir outside of Hydrogen monorepo.",
      "Please report this error."
    );
  }
  return joinPath(dirname(monorepoPackagesPath), "templates", "skeleton");
}

// tsup.config.ts
rmSync("./dist", { recursive: true, force: true });
var commonConfig = defineConfig({
  format: "esm",
  minify: false,
  bundle: false,
  splitting: true,
  treeshake: true,
  sourcemap: false,
  clean: false
  // Avoid deleting the assets folder
});
var outDir = "dist";
var tsup_config_default = defineConfig([
  {
    ...commonConfig,
    entry: ["src/**/*.ts", "!src/**/*.test.ts"],
    outDir,
    // Generate types only for the exposed entry points
    dts: { entry: ["src/index.ts", "src/commands/hydrogen/init.ts"] },
    async onSuccess() {
      await copy(path.resolve("assets"), path.join(outDir, ASSETS_DIR_PREFIX), {
        recursive: true,
        force: true
      });
      const starterOutDir = path.join(
        outDir,
        ASSETS_DIR_PREFIX,
        ASSETS_STARTER_DIR
      );
      await copy(getSkeletonSourceDir(), starterOutDir, {
        force: true,
        recursive: true,
        filter: (filepath) => !/node_modules|\.shopify|\.cache|\.turbo|build|dist/gi.test(filepath)
      });
      console.log(
        "\n",
        "Copied skeleton template files to build directory",
        "\n"
      );
      console.log("\n", "Generating Oclif manifest...");
      await execAsync("node ./scripts/generate-manifest.mjs");
      console.log("", "Oclif manifest generated.\n");
    }
  },
  {
    ...commonConfig,
    // TODO remove virtual routes copy when deprecating classic compiler
    entry: ["../hydrogen/src/vite/virtual-routes/**/*.tsx"],
    outDir: `${outDir}/${ASSETS_DIR_PREFIX}/virtual-routes`,
    outExtension: () => ({ js: ".jsx" }),
    dts: false,
    async onSuccess() {
      await copy(
        "../hydrogen/src/vite/virtual-routes/assets",
        `${outDir}/${ASSETS_DIR_PREFIX}/virtual-routes/assets`,
        { recursive: true, force: true }
      );
      console.log("\n", "Copied virtual route assets to build directory", "\n");
    }
  }
]);
export {
  tsup_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
