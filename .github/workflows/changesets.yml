name: Changesets

on:
  push:
    branches:
      - main

concurrency:
  group: changeset-${{ github.head_ref }}
  cancel-in-progress: true

jobs:
  changelog:
    runs-on: ubuntu-latest
    if: github.repository_owner == 'shopify'
    name: Changelog PR or Release
    permissions:
      contents: write
      pull-requests: write
      id-token: write
    outputs:
      published: ${{ steps.changesets.outputs.published }}
      # A JSON array to present the published packages. The format is [{"name": "@xx/xx", "version": "1.2.0"}, {"name": "@xx/xy", "version": "0.8.9"}]
      publishedPackages: ${{ steps.changesets.outputs.publishedPackages }}
      latest: ${{ env.latest }}
      latestBranch: ${{ env.latestBranch }}
      latestVersion: ${{ env.latestVersion }}
    steps:
      - name: Checkout the code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        # This makes Actions fetch all Git history so that Changesets can generate changelogs with the correct commits
        with:
          fetch-depth: 0

      - name: âŽ” Setup node
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Install the packages
        run: npm ci --legacy-peer-deps

      - name: Detect latest branch and version
        id: flags
        run: |
          # Check if any CalVer packages have changesets (CalVer precedence logic)
          HAS_CALVER=$(node .changeset/calver-shared.js has-calver-changesets)
          echo "Has CalVer changesets: $HAS_CALVER"
          
          if [ "$HAS_CALVER" = "true" ]; then
            # CalVer packages have changesets - use CalVer version format
            BRANCH=$(node .changeset/get-calver-version-branch.js)
            echo "latestBranch=$BRANCH" >> $GITHUB_ENV
            echo "latest=${{ github.ref_name == 'main' }}" >> $GITHUB_ENV
            echo "Detected latestBranch: $BRANCH"
            
            # Calculate next CalVer version using existing calver utilities
            HYDROGEN_VERSION=$(node -p "require('./packages/hydrogen/package.json').version")
            HAS_MAJOR=$(node .changeset/calver-shared.js has-major-changesets)
            
            if [ "$HAS_MAJOR" = "true" ]; then
              NEXT_VERSION=$(node .changeset/calver-shared.js get-next "$HYDROGEN_VERSION" "major")
              echo "latestVersion=$NEXT_VERSION" >> $GITHUB_ENV
              echo "Detected next version (major): $NEXT_VERSION"
            else
              NEXT_VERSION=$(node .changeset/calver-shared.js get-next "$HYDROGEN_VERSION" "patch")
              echo "latestVersion=$NEXT_VERSION" >> $GITHUB_ENV
              echo "Detected next version (patch): $NEXT_VERSION"
            fi
          else
            # Only semver packages have changesets - use semver release format
            echo "latestBranch=semver" >> $GITHUB_ENV
            echo "latest=${{ github.ref_name == 'main' }}" >> $GITHUB_ENV
            echo "latestVersion=semver" >> $GITHUB_ENV
            echo "Detected semver-only release"
          fi

      - name: Build the dist code
        run: npm run build

      - name: Check for major protection bypass
        if: env.latest == 'true'
        run: |
          echo "Checking for active major version bypass..."
          # If bypass is active, ensure old release PR is closed
          BYPASS_PRS=$(gh pr list --state open --label "major-bypass-active" --json number -q '.[].number' || echo "")
          if [ -n "$BYPASS_PRS" ]; then
            echo "Major bypass active on PR(s): $BYPASS_PRS"
            echo "Checking for existing release PR to close..."
            # Close any existing release PR to prevent conflicts
            RELEASE_PR=$(gh pr list --state open --head changeset-release/main --json number -q '.[].number' || echo "")
            if [ -n "$RELEASE_PR" ]; then
              echo "Closing release PR #$RELEASE_PR due to active major bypass"
              gh pr close $RELEASE_PR -c "Automatically closed: Major version bypass is active on PR #$BYPASS_PRS"
            fi
          else
            echo "No active major bypass found"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release Pull Request or Publish (for latest release)
        if: env.latest == 'true'
        id: changesets
        uses: changesets/action@06245a4e0a36c064a573d4150030f5ec548e4fcc # v1.4.10
        with:
          version: npm run version
          publish: npm run changeset publish
          # we use the commit message in next release workflow file. This avoid a next release when an actual release is happening
          commit: '[ci] release ${{ env.latestVersion }}'
          title: '[ci] release ${{ env.latestVersion }}'
        env:
          GITHUB_TOKEN: ${{ secrets.SHOPIFY_GH_ACCESS_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          NPM_CONFIG_PROVENANCE: true

  compile:
    needs: changelog
    # Only compile templates if a release was published, and we're on the "latest" release branch
    if: needs.changelog.outputs.published == 'true' && needs.changelog.outputs.latest == 'true'
    runs-on: ubuntu-latest
    name: Compile the typescript templates and push them to main
    steps:
      - name: Checkout the code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Install the packages
        run: npm install --frozen-lockfile --ignore-engines

      - name: Build the dist code
        run: npm run build

      - name: Compile skeleton
        run: |
          node scripts/compile-template-for-dist.mjs skeleton
          (cd templates/skeleton-js && npm i --package-lock-only --workspaces false)
          (cd templates/skeleton-ts && npm i --package-lock-only --workspaces false)

      - name: Update templates in the dist branch
        run: |
          git add .
          git status
          git config user.email "hydrogen@shopify.com"
          git config user.name "Hydrogen Bot"
          git show-ref
          git commit -m "Update templates for dist"
          git push origin HEAD:dist --force

  slack_announcement:
    needs: changelog
    # Only announce if a release was published, and we're on the "latest" release branch
    if: needs.changelog.outputs.published == 'true' && needs.changelog.outputs.latest == 'true'
    runs-on: ubuntu-latest
    steps:
      # Extract the Hydrogen version from published packages
      - name: Extract Hydrogen version
        id: extract_version
        run: |
          PACKAGES='${{ needs.changelog.outputs.publishedPackages }}'
          HYDROGEN_VERSION=$(echo $PACKAGES | jq -r '.[] | select(.name == "@shopify/hydrogen") | .version')
          echo "HYDROGEN_VERSION=$HYDROGEN_VERSION" >> $GITHUB_ENV

      - name: Post release announcement on Partner Slack
        # Only post if a Hydrogen version was included in the release
        if: env.HYDROGEN_VERSION != ''
        id: slack
        uses: fjogeleit/http-request-action@bf78da14118941f7e940279dd58f67e863cbeff6 # v1.16.3
        with:
          url: ${{ secrets.SLACK_NOTIFICATION_URL }}
          method: 'POST'
          customHeaders: '{"Content-Type": "application/json"}'
          data: '{"version": "${{ env.HYDROGEN_VERSION }}"}'

  # sync_latest:
  #   needs: changelog
  #   # Only update package-lock.json if a release was published, and we're on the "latest" release branch
  #   if: needs.changelog.outputs.published == 'true' && needs.changelog.outputs.latest == 'true'
  #   runs-on: ubuntu-latest
  #   name: Sync latest to version branch
  #   steps:
  #     - name: Checkout the code
  #       uses: actions/checkout@v4

  #     - name: Update package-lock.json
  #       run: npm install --package-lock-only --ignore-engines

  # TODO: Figure out how to push to protected branch
  # - name: Push commit to main branch
  #   run: |
  #     git add .
  #     git status
  #     git config user.email "hydrogen@shopify.com"
  #     git config user.name "Hydrogen Bot"
  #     git show-ref
  #     git commit -m "[ci] Update package-lock.json"
  #     git push origin HEAD:main

  # - name: Sync latest to version branch
  #   run: |
  #     git config user.email "hydrogen@shopify.com"
  #     git config user.name "Hydrogen Bot"
  #     git show-ref
  #     git commit -m "[ci] release ${{ needs.changelog.outputs.latestBranch }}"
  #     git push origin main:${{ needs.changelog.outputs.latestBranch }} --force
