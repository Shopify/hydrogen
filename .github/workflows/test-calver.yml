name: Test CalVer Scripts

# This workflow validates the automated CalVer (Calendar Versioning) release system
# that powers Hydrogen's quarterly release cycle aligned with Shopify Storefront API versions.
#
# CRITICAL: These scripts run in production changesets.yml workflow during every release.
# Failures here indicate potential version corruption, release blocking, or incorrect
# quarterly alignment that affects millions of Hydrogen developers.
#
# What it validates:
# 1. Script syntax - enforce-calver-ci.js is valid JavaScript (prevents runtime failures)
# 2. Linux compatibility - sed commands work with GNU sed (GitHub Actions environment)
# 3. Patch versioning - CalVer packages increment correctly (2025.5.0 → 2025.5.1)
# 4. Major versioning - CalVer packages align to quarters (2025.5.0 → 2025.7.0 for Q3)
# 5. Branch detection - Automated quarter advancement logic (2025-05 → 2025-07)
# 6. CLI utilities - Shared functions used by changesets.yml workflow
# 7. Mixed packages - CalVer vs semver package type handling and precedence logic
#
# Each test validates against actual package.json versions and changeset files,
# outputting explicit expected vs actual results for debugging failures.
# 
# SAFETY: All tests are non-destructive:
# - Creates temporary copies and reverts all changes automatically
# - Test changesets are created and deleted within each test
# - No permanent modifications to any files
# - No npm publishing or actual releases triggered
# - Tests validate current repository state without assumptions about changeset presence

on:
  pull_request:
    paths:
      - '.changeset/enforce-calver-*.js'
      - '.changeset/calver-shared.js'
      - '.changeset/get-calver-version-branch.js'
      - '.changeset/test-calver-comparison.sh'
      - 'docs/CALVER.md'
      - '.github/workflows/test-calver.yml'
  push:
    branches:
      - 'juanpprieto/calver-release-enforcement'
  workflow_dispatch:

jobs:
  test-calver-linux:
    name: Test CalVer on Linux CI
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Test 1 - Validate Script Syntax
        run: |
          echo "::group::Test 1 - JavaScript Syntax Validation"
          echo "Expected: All scripts should have valid JavaScript syntax"
          echo ""
          
          node -c .changeset/enforce-calver-ci.js
          echo "✅ enforce-calver-ci.js - Valid syntax"
          
          node -c .changeset/enforce-calver-local.js
          echo "✅ enforce-calver-local.js - Valid syntax"
          
          node -c .changeset/calver-shared.js
          echo "✅ calver-shared.js - Valid syntax"
          
          node -c .changeset/get-calver-version-branch.js
          echo "✅ get-calver-version-branch.js - Valid syntax"
          
          echo "::endgroup::"

      - name: Test 2 - Linux sed Compatibility
        run: |
          echo "::group::Test 2 - GNU sed (Linux) Compatibility"
          echo "Expected: sed should work without -i.tmp extension on Linux"
          echo ""
          
          # Create test file
          echo '{"version": "npm run version:changeset && node .changeset/enforce-calver-ci.js && npm run version:post && npm run format"}' > test.json
          echo "Created test file with content:"
          cat test.json
          echo ""
          
          # Test GNU sed (should work on Linux without .tmp extension)
          sed -i 's/"version": "npm run version:changeset && node \.changeset\/enforce-calver-ci\.js && npm run version:post && npm run format"/"version": "changeset version"/' test.json
          
          echo "After sed replacement:"
          cat test.json
          echo ""
          
          # Verify
          if grep -q '"version": "changeset version"' test.json; then
            echo "✅ GNU sed works correctly on Linux CI"
          else
            echo "❌ GNU sed failed on Linux CI"
            exit 1
          fi
          
          rm test.json
          echo "::endgroup::"

      - name: Test 3 - Patch Version Bumps
        run: |
          echo "::group::Test 3 - Patch Version Bumps for CalVer Packages"
          echo "Expected: CalVer packages should increment third segment (e.g., 2025.5.0 → 2025.5.1)"
          echo ""
          
          # Create test changeset
          cat > .changeset/test-patch.md << 'EOF'
          ---
          "@shopify/hydrogen": patch
          "@shopify/hydrogen-react": patch
          "skeleton": patch
          ---
          
          Test: Patch bumps for CalVer packages
          EOF
          
          echo "Created test changeset for patch bumps"
          echo ""
          
          # Run comparison test and capture output
          echo "Running CalVer comparison test..."
          ./.changeset/test-calver-comparison.sh | tee test-output.log
          
          echo ""
          echo "Validating results:"
          
          # Check that CalVer packages got patch bumps
          if grep -q "@shopify/hydrogen.*2025\.5\.0.*2025\.5\.1.*2025\.5\.1" test-output.log; then
            echo "✅ @shopify/hydrogen: 2025.5.0 → 2025.5.1 (correct patch bump)"
          else
            echo "❌ @shopify/hydrogen did not bump correctly"
          fi
          
          if grep -q "@shopify/hydrogen-react.*2025\.5\.0.*2025\.5\.1.*2025\.5\.1" test-output.log; then
            echo "✅ @shopify/hydrogen-react: 2025.5.0 → 2025.5.1 (correct patch bump)"
          else
            echo "❌ @shopify/hydrogen-react did not bump correctly"
          fi
          
          if grep -q "skeleton.*2025\.5\.2.*2025\.5\.3.*2025\.5\.3" test-output.log; then
            echo "✅ skeleton: 2025.5.2 → 2025.5.3 (correct patch bump)"
          else
            echo "❌ skeleton did not bump correctly"
          fi
          
          # Clean up
          rm .changeset/test-patch.md test-output.log
          echo "::endgroup::"

      - name: Test 4 - Major Version Bumps (Quarter Alignment)
        run: |
          echo "::group::Test 4 - Major Version Bumps with Quarter Alignment"
          echo "Expected: CalVer packages should advance to next quarter (2025.5.x → 2025.7.0)"
          echo "Current month: $(date +%m), Current quarter should map to: Q$((($(date +%m)-1)/3+1))"
          echo ""
          
          # Create major bump changeset
          cat > .changeset/test-major.md << 'EOF'
          ---
          "@shopify/hydrogen": major
          "@shopify/hydrogen-react": major
          ---
          
          Test: Major bumps should align to next quarter
          EOF
          
          echo "Created test changeset for major bumps"
          echo ""
          
          # Run comparison test
          echo "Running CalVer comparison test..."
          ./.changeset/test-calver-comparison.sh | tee test-output.log
          
          echo ""
          echo "Validating quarter alignment:"
          
          # We're in Q1 2025, so next quarter should be Q2 (month 4) = 2025.4.0
          # But if we're already past Q1, adjust accordingly
          CURRENT_MONTH=$(date +%m)
          if [ $CURRENT_MONTH -le 3 ]; then
            NEXT_QUARTER="2025.4.0"
            QUARTER_NAME="Q2"
          elif [ $CURRENT_MONTH -le 6 ]; then
            NEXT_QUARTER="2025.7.0"
            QUARTER_NAME="Q3"
          elif [ $CURRENT_MONTH -le 9 ]; then
            NEXT_QUARTER="2025.10.0"
            QUARTER_NAME="Q4"
          else
            NEXT_QUARTER="2026.1.0"
            QUARTER_NAME="Q1 (next year)"
          fi
          
          echo "Next quarter should be: $QUARTER_NAME = $NEXT_QUARTER"
          echo ""
          
          # Since we're currently at 2025.5.0, next quarter is 2025.7.0 (Q3)
          if grep -q "@shopify/hydrogen.*2025\.5\.0.*major.*2025\.7\.0.*2025\.7\.0" test-output.log; then
            echo "✅ @shopify/hydrogen: 2025.5.0 → 2025.7.0 (correct quarter alignment)"
          else
            echo "⚠️  @shopify/hydrogen quarter alignment - check output above"
          fi
          
          if grep -q "@shopify/hydrogen-react.*2025\.5\.0.*major.*2025\.7\.0.*2025\.7\.0" test-output.log; then
            echo "✅ @shopify/hydrogen-react: 2025.5.0 → 2025.7.0 (correct quarter alignment)"
          else
            echo "⚠️  @shopify/hydrogen-react quarter alignment - check output above"
          fi
          
          # Clean up
          rm .changeset/test-major.md test-output.log
          echo "::endgroup::"

      - name: Test 5 - Branch Detection
        run: |
          echo "::group::Test 5 - Latest Branch Detection"
          echo "Expected: Correctly detect current and next release branches"
          echo ""
          
          # Test without major changesets
          echo "Testing branch detection without major changesets:"
          BRANCH=$(node .changeset/get-calver-version-branch.js)
          echo "Current branch detected: $BRANCH"
          if [ "$BRANCH" = "2025-05" ]; then
            echo "✅ Correctly detected current branch (2025-05)"
          else
            echo "❌ Branch detection failed, expected 2025-05, got $BRANCH"
            exit 1
          fi
          
          # Test with major changeset
          echo ""
          echo "Testing branch detection with major changeset:"
          cat > .changeset/test-major-branch.md << 'EOF'
          ---
          "@shopify/hydrogen": major
          ---
          Test major for branch detection
          EOF
          
          BRANCH=$(node .changeset/get-calver-version-branch.js)
          echo "Next branch detected: $BRANCH"
          if [ "$BRANCH" = "2025-07" ]; then
            echo "✅ Correctly detected next quarter branch (2025-07)"
          else
            echo "❌ Branch detection failed, expected 2025-07, got $BRANCH"
            exit 1
          fi
          
          rm .changeset/test-major-branch.md
          echo "::endgroup::"

      - name: Test 6 - Shared Utilities CLI
        run: |
          echo "::group::Test 6 - CalVer Shared Utilities CLI"
          echo "Expected: CLI commands should work correctly"
          echo ""
          
          # Test get-next command
          NEXT=$(node .changeset/calver-shared.js get-next "2025.5.0" "major")
          echo "get-next 2025.5.0 major: $NEXT"
          if [ "$NEXT" = "2025.7.0" ]; then
            echo "✅ get-next command works"
          else
            echo "❌ get-next failed, expected 2025.7.0, got $NEXT"
            exit 1
          fi
          
          # Test detect-bump command
          BUMP=$(node .changeset/calver-shared.js detect-bump "2025.5.0" "2025.7.0")
          echo "detect-bump 2025.5.0 → 2025.7.0: $BUMP"
          if [ "$BUMP" = "major" ]; then
            echo "✅ detect-bump command works"
          else
            echo "❌ detect-bump failed, expected major, got $BUMP"
            exit 1
          fi
          
          # Test list-calver-packages command
          PACKAGES=$(node .changeset/calver-shared.js list-calver-packages)
          echo "CalVer packages: $PACKAGES"
          if echo "$PACKAGES" | grep -q "@shopify/hydrogen"; then
            echo "✅ list-calver-packages command works"
          else
            echo "❌ list-calver-packages failed"
            exit 1
          fi
          
          # Test has-calver-changesets command (check current repository state)
          HAS_CALVER=$(node .changeset/calver-shared.js has-calver-changesets)
          echo "has-calver-changesets (current state): $HAS_CALVER"
          if [ "$HAS_CALVER" = "true" ] || [ "$HAS_CALVER" = "false" ]; then
            echo "✅ has-calver-changesets command works (returns boolean)"
          else
            echo "❌ has-calver-changesets failed, expected true/false, got $HAS_CALVER"
            exit 1
          fi
          
          # Test has-major-changesets command (check current repository state)
          HAS_MAJOR=$(node .changeset/calver-shared.js has-major-changesets)
          echo "has-major-changesets (current state): $HAS_MAJOR"
          if [ "$HAS_MAJOR" = "true" ] || [ "$HAS_MAJOR" = "false" ]; then
            echo "✅ has-major-changesets command works (returns boolean)"
          else
            echo "❌ has-major-changesets failed, expected true/false, got $HAS_MAJOR"
            exit 1
          fi
          
          # Test with actual changeset
          cat > .changeset/test-changeset-detection.md << 'EOF'
          ---
          "@shopify/hydrogen": patch
          ---
          Test changeset detection
          EOF
          
          HAS_CALVER=$(node .changeset/calver-shared.js has-calver-changesets)
          echo "has-calver-changesets (with hydrogen changeset): $HAS_CALVER"
          if [ "$HAS_CALVER" = "true" ]; then
            echo "✅ has-calver-changesets detects CalVer packages correctly"
          else
            echo "❌ has-calver-changesets failed to detect CalVer changeset"
            exit 1
          fi
          
          rm .changeset/test-changeset-detection.md
          
          echo "::endgroup::"

      - name: Test 7 - Mixed Package Types
        run: |
          echo "::group::Test 7 - Mixed CalVer and Semver Packages"
          echo "Expected: CalVer packages use YYYY.M.P format, semver packages use X.Y.Z format"
          echo ""
          
          # Create mixed changeset
          cat > .changeset/test-mixed.md << 'EOF'
          ---
          "@shopify/hydrogen": patch
          "@shopify/cli-hydrogen": minor
          "@shopify/mini-oxygen": patch
          ---
          
          Test: Mixed CalVer and semver packages
          EOF
          
          echo "Created test changeset with mixed package types"
          echo ""
          
          # Run comparison test
          echo "Running CalVer comparison test..."
          ./.changeset/test-calver-comparison.sh | tee test-output.log
          
          echo ""
          echo "Validating version formats:"
          
          # CalVer package should use YYYY.M.P format
          if grep -q "@shopify/hydrogen.*2025\.5\.[0-9]" test-output.log; then
            echo "✅ @shopify/hydrogen uses CalVer format (2025.5.x)"
          else
            echo "❌ @shopify/hydrogen not using CalVer format"
          fi
          
          # Semver packages should use X.Y.Z format (not YYYY)
          if grep -q "@shopify/cli-hydrogen.*[^2025]\.[0-9]*\.[0-9]" test-output.log; then
            echo "✅ @shopify/cli-hydrogen uses semver format (not CalVer)"
          else
            echo "⚠️  @shopify/cli-hydrogen version format - check output"
          fi
          
          if grep -q "@shopify/mini-oxygen.*[^2025]\.[0-9]*\.[0-9]" test-output.log; then
            echo "✅ @shopify/mini-oxygen uses semver format (not CalVer)"
          else
            echo "⚠️  @shopify/mini-oxygen version format - check output"
          fi
          
          # Clean up
          rm .changeset/test-mixed.md test-output.log
          echo "::endgroup::"

      - name: Summary
        if: always()
        run: |
          echo "======================================"
          echo "CalVer CI Test Summary"
          echo "======================================"
          echo ""
          echo "✅ Tests validate that:"
          echo "  1. CI script has valid syntax for Node.js execution"
          echo "  2. sed commands work on Linux (GNU sed)"
          echo "  3. Patch bumps increment the third segment (2025.5.0 → 2025.5.1)"
          echo "  4. Major bumps align to quarters (2025.5.0 → 2025.7.0 for Q3)"
          echo "  5. CalVer packages use YYYY.M.P while semver packages use X.Y.Z"
          echo ""
          echo "All tests should produce explicit, verifiable output above."