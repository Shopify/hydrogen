# yaml-language-server: $schema=../../recipe.schema.json

gid: 3bce358d-d709-4dc8-8c4e-e0c047c17b12
title: Third-party API Queries and Caching
summary: Add third-party GraphQL API queries with Oxygen's sub-request caching
  to your Hydrogen storefront.
description: |
  This recipe demonstrates how to integrate third-party GraphQL APIs into your Hydrogen storefront 
  with Oxygen's powerful sub-request caching system. Using the Rick & Morty API as an example, 
  you'll learn how to:

  1. **Create a cached GraphQL client** - Build a reusable client factory that handles query 
     minification, error handling, and integrates with Oxygen's caching infrastructure

  2. **Integrate with Hydrogen's context** - Add the third-party client to the global context 
     system, making it available in all routes and actions throughout your application

  3. **Query external APIs efficiently** - Fetch data from third-party sources in parallel 
     with Shopify API calls, leveraging Oxygen's caching to minimize latency and API calls

  ## Use Cases

  This pattern is perfect for integrating:
  - **CMS platforms** (Contentful, Sanity, Strapi)
  - **Review systems** (Yotpo, Judge.me, Reviews.io)
  - **Analytics services** (custom dashboards, reporting APIs)
  - **Custom backend APIs** (inventory systems, ERP integrations)
  - **Marketing tools** (email platforms, loyalty programs)

  ## Performance Benefits

  - **Sub-request caching**: Responses are cached at the edge, reducing API calls
  - **Parallel data fetching**: Load third-party and Shopify data simultaneously
  - **Configurable cache strategies**: Use CacheShort(), CacheLong(), or custom TTLs
  - **Automatic cache key generation**: Based on query and variables
notes:
  - The example uses rickandmortyapi.com for demonstration, but the pattern
    works with any GraphQL or REST API
  - Caching strategies can be customized per query using Hydrogen's cache
    utilities (CacheShort, CacheLong, CacheNone)
  - The client is added to the global context, making it available in all routes
  - TypeScript types are automatically augmented for full IDE support
  - Error handling is built-in with graceful fallbacks
requirements: |
  - Basic knowledge of GraphQL
  - Understanding of Hydrogen's context system
  - Familiarity with TypeScript (for type augmentation)
ingredients:
  - path: templates/skeleton/app/lib/createRickAndMortyClient.server.ts
    description: A GraphQL client factory for third-party APIs with Oxygen caching support
deletedFiles: []
steps:
  - type: PATCH
    step: "1"
    name: README.md
    description: null
    diffs:
      - file: README.md
        patchFile: README.md.49f8fa.patch
  - type: NEW_FILE
    step: 1
    name: Create the third-party API client
    description: |
      Create a new GraphQL client factory that integrates with Oxygen's caching system.
      This client handles query minification, error handling, and cache key generation.
    ingredients:
      - path: templates/skeleton/app/lib/createRickAndMortyClient.server.ts
  - type: PATCH
    step: 2
    name: Add the client to Hydrogen context
    description: |
      Import the Rick and Morty client and add it to the Hydrogen context so it's available
      in all routes. Also update TypeScript declarations for proper type support.
    diffs:
      - file: app/lib/context.ts
        patchFile: context.ts.cfd9da.patch
  - type: PATCH
    step: 3
    name: Query and display third-party data
    description: |
      Update the homepage to fetch data from the third-party API and display it alongside
      Shopify data. This demonstrates parallel data fetching and proper caching strategies.
    diffs:
      - file: app/routes/_index.tsx
        patchFile: _index.tsx.ee5996.patch
nextSteps: |
  After applying this recipe, you can:

  1. **Customize the caching strategy** - Adjust cache durations based on your data freshness requirements:
     ```ts
     // Short cache for frequently changing data
     cache: CacheShort()
     
     // Long cache for stable data
     cache: CacheLong()
     
     // Custom cache duration
     cache: CacheCustom({
       mode: 'must-revalidate',
       maxAge: 60, // 1 minute
       staleWhileRevalidate: 60 * 5, // 5 minutes
     })
     ```

  2. **Add more third-party APIs** - Create additional clients following the same pattern:
     - Copy `createRickAndMortyClient.server.ts` and adapt for your API
     - Add the new client to `context.ts`
     - Update TypeScript types in the global declaration

  3. **Implement error handling** - Add try-catch blocks and fallback UI:
     ```ts
     try {
       const data = await context.yourApi.query(QUERY);
       return {data};
     } catch (error) {
       console.error('API Error:', error);
       return {data: null, error: error.message};
     }
     ```

  4. **Monitor performance** - Use Oxygen's analytics to track:
     - Cache hit rates
     - API response times
     - Sub-request performance

  5. **Replace the example** - Swap out the Rick & Morty API with your actual third-party service:
     - Update the API endpoint in the client
     - Modify queries to match your API schema
     - Update components to display your data
llms:
  userQueries: []
  troubleshooting: []
commit: f569cb38cd67aa386cfbdcd5bd0d3af9d8d321bd
