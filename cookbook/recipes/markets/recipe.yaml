# yaml-language-server: $schema=../../recipe.schema.json

gid: e1bfda7e-18d3-497e-8917-9d15ab0ef1cf
title: Markets
summary: This recipe adds basic localization support to your Hydrogen app using
  Shopify Markets.
description: |
  This recipe shows how to add support for [Shopify
  Markets](https://shopify.dev/docs/apps/build/markets) to your Hydrogen app. Markets
  let you segment your audience based on location and serve different content to each market.

  You can use Markets in a variety of ways. In this recipe,
  you'll set up basic localization support for your Hydrogen store,
  learn what options are available for routing, add a country
  selector component to your app, and set up links that work across
  localized versions of your store.

  There are several ways to implement localization in your Shopify Hydrogen
  store, and the approach you take will depend on your project's
  requirements. This recipe uses **URL-based localization**, which makes
  market information visible in the URL. This provides two key benefits:

  - It's transparent to search engine crawlers.
  - It allows each localized version of your store to be properly indexed.

  This approach is typically implemented in two ways:

  1. Path-based localization (recommended)
      - **Example:** `example.com/fr-ca/products`
      - **Implementation:** Requires adding a locale parameter to your routes
        - Rename `routes/_index.tsx` to `routes/($locale)._index.tsx`
      - **Advantages:** No infrastructure changes needed
      - **Considerations:** Requires additional code to handle link formatting throughout your application
  2. Subdomain or top-level domain localization
      - **Example:** `fr-ca.example.com/products` (or `example.fr/products`)
      - **Implementation:** Requires infrastructure configuration
      - **Advantages:** Maintains consistent URL structure across localized stores
      - **Considerations:** More complex setup at the infrastructure level

  Although you can use other methods for localization (like cookies or HTTP headers),
  these approaches have one significant disadvantage: they're
  not visible to search engine crawlers. This can negatively impact your
  SEO for different markets.

  In this recipe, we'll implement **path-based localization**.
notes:
  - This recipe is particularly useful for existing Hydrogen projects. If you
    need to set up a brand new Hydrogen app, you can get a solid foundation by
    selecting the localization options when setting up your new project using
    the Shopify CLI. You can also use `h2 setup markets` to add localization
    support to your new Hydrogen app.
requirements: |
  - Set up your store's regions and languages using [Shopify
  Markets](https://help.shopify.com/en/manual/markets).
  - Configure your products appropriately for each market.
  - Make sure your Hydrogen app is configured to use a default `language` and
  `country code`. They will be used as the fallback when no market is explicitly
  selected.
ingredients:
  - path: templates/skeleton/app/components/CountrySelector.tsx
    description: A component that displays a country selector inside the Header.
  - path: templates/skeleton/app/components/Link.tsx
    description: A wrapper around the Link component that uses the selected locale
      path prefix.
  - path: templates/skeleton/app/lib/i18n.ts
    description: A helper function to get locale information from the context, a
      hook to retrieve the selected locale, and a list of available locales.
  - path: templates/skeleton/app/routes/($locale)._index.tsx
    description: A route that renders a localized version of the home page.
  - path: templates/skeleton/app/routes/($locale).cart.tsx
    description: A localized cart route.
  - path: templates/skeleton/app/routes/($locale).products.$handle.tsx
    description: A route that renders a localized version of the product page.
  - path: templates/skeleton/app/routes/($locale).tsx
    description: A utility route that makes sure the locale is valid.
deletedFiles:
  - templates/skeleton/app/routes/_index.tsx
  - templates/skeleton/app/routes/cart.tsx
  - templates/skeleton/app/routes/products.$handle.tsx
steps:
  - type: INFO
    step: 1
    name: Add localization utilities and update core components
    description: In this section, we'll create utilities to handle localization and
      country selection, and update the core components to use these utilities.
  - type: NEW_FILE
    step: 1.1
    name: Create a CountrySelector component
    description: |
      Create a new `CountrySelector` component that allows users to select the locale from a dropdown of the supported locales.

      To handle redirects, use a `Form` that updates the cart buyer identity,
      which eventually redirects to the localized root of the app.
    ingredients:
      - path: templates/skeleton/app/components/CountrySelector.tsx
  - type: NEW_FILE
    step: 1.2
    name: Create a Link wrapper component
    description: Create a wrapper component around the `Link` component that
      prepends the selected locale path prefix (if any) to the actual links.
    ingredients:
      - path: templates/skeleton/app/components/Link.tsx
  - type: NEW_FILE
    step: 1.3
    name: Create i18n helpers
    description: |
      1. Create a helper function to get locale information from the context, and
      a hook to retrieve the selected locale.
      2. Define a set of supported locales for the app.
      3. Add a utility function to validate the locale from the route param against the supported locales.
    ingredients:
      - path: templates/skeleton/app/lib/i18n.ts
  - type: PATCH
    step: 1.4
    name: Use the new Link component in the ProductItem component
    description: |
      Update the `ProductItem` component to use the `Link` component from the
      `app/components/Link.tsx` file.
    diffs:
      - file: app/components/ProductItem.tsx
        patchFile: ProductItem.tsx.f84e8c.patch
  - type: PATCH
    step: 1.5
    name: Add the selected locale to the context
    description: |
      Detect the locale from the URL path, and add it to the HydrogenContext.
    diffs:
      - file: app/lib/context.ts
        patchFile: context.ts.cfd9da.patch
  - type: PATCH
    step: 1.6
    name: Add the CountrySelector component to the Header
    description: |
      This adds a country selector component to the navigation.
    diffs:
      - file: app/components/Header.tsx
        patchFile: Header.tsx.82c1ce.patch
  - type: PATCH
    step: 1.7
    name: Add the selected locale to the root route
    description: |
      1. Include the selected locale in the root route's loader data.
      2. Make sure to redirect to the 404 page if the requested locale is not supported.
      3. Add a key prop to the `PageLayout` component to make sure it re-renders
      when the locale changes.
    diffs:
      - file: app/root.tsx
        patchFile: root.tsx.8c182c.patch
  - type: INFO
    step: 2
    name: Localizing the individual routes
    description: |
      In this section, we'll add localization to the individual routes using the language [dynamic segment](https://reactrouter.com/start/data/routing#optional-segments).
  - type: INFO
    step: 2.1
    name: Add language dynamic segment to the desired routes
    description: |
      To implement path-based localization, add a language
      dynamic segment to your localized routes (for example, renaming `routes/_index.tsx`
      to `routes/($locale)._index.tsx`).

      For brevity, we'll focus on the home page, the cart page, and the product page in this example. In your app, you should do this for all the app routes.
  - type: NEW_FILE
    step: 2.2
    name: Add localization to the home page
    description: |
      1. Add the dynamic segment to the home page route.
      2. Use the new `Link` component as a drop-in replacement.
    ingredients:
      - path: templates/skeleton/app/routes/($locale)._index.tsx
        renamedFrom: templates/skeleton/app/routes/_index.tsx
  - type: NEW_FILE
    step: 2.3
    name: Add localization to the cart page
    description: Add the dynamic segment to the cart page route.
    ingredients:
      - path: templates/skeleton/app/routes/($locale).cart.tsx
        renamedFrom: templates/skeleton/app/routes/cart.tsx
  - type: NEW_FILE
    step: 2.4
    name: Add localization to the product page
    description: |
      1. Add the dynamic segment to the product page route.
      2. Update the `meta` function to also update the canonical URL to use the
      localized prefix.
    ingredients:
      - path: templates/skeleton/app/routes/($locale).products.$handle.tsx
        renamedFrom: templates/skeleton/app/routes/products.$handle.tsx
  - type: NEW_FILE
    step: 2.5
    name: Add a utility route to validate the locale.
    description: |
      Add a utility route in `$(locale).tsx` that will use `localeMatchesPrefix`
      to validate the locale from the URL params. If the locale is invalid,
      the route will throw a 404 error.
    ingredients:
      - path: templates/skeleton/app/routes/($locale).tsx
  - type: PATCH
    step: 2.6
    name: Update the sitemap route's locales.
    description: |
      Update the sitemap route to use the locales included in `SUPPORTED_LOCALES`.
    diffs:
      - file: app/routes/sitemap.$type.$page[.xml].tsx
        patchFile: sitemap.$type.$page[.xml].tsx.f1a911.patch
  - type: PATCH
    step: 2.7
    name: Update the useVariantUrl function
    description: |
      Remove the `pathname` parameter from the `useVariantUrl` function, and the logic that prepends the locale to the path.
    diffs:
      - file: app/lib/variants.ts
        patchFile: variants.ts.15c990.patch
nextSteps: |
  - Test your implementation by going to your store and selecting a different
  market from the country selector.
  - Refer to the [Shopify
  Help Center](https://help.shopify.com/en/manual/markets) for
  more information on how to optimize and manage your international markets.
llms:
  userQueries:
    - How do I add localization support to my Hydrogen app?
    - How do I add a country selector to my Hydrogen app?
    - Set up Shopify Markets in Hydrogen
    - Help me segment my customers based on their location
  troubleshooting:
    - issue: I'm not seeing the localized content on my storefront.
      solution: In your Shopify admin, make sure you've set up your store's regions
        and langauges using Shopify Markets, then check that your products are
        appropriately configured for each market. In your Hydrogen app, make
        sure you've added the dynamic segment to the desired routes and that the
        routes are correctly named.
    - issue: Some pages are showing localized content, but others aren't.
      solution: Make sure you update *all* routes that need localization (not only the
        routes for the home page, the cart page, and the product page). See step
        2.1 for details.
commit: 1bff1dac122eed09583dce54fc83a19ababddfca
