# yaml-language-server: $schema=../../recipe.schema.json

gid: e1bfda7e-18d3-497e-8917-9d15ab0ef1cf
title: Markets
summary: This recipe adds basic localization support to your Hydrogen app using
  Shopify Markets.
description: |
  This recipe shows how to add support for [Shopify
  Markets](https://shopify.dev/docs/apps/build/markets) to your Hydrogen app. Markets
  let you segment your audience based on location and serve different content to each market.

  You can use Markets in a variety of ways. In this recipe,
  you'll set up basic localization support for your Hydrogen store,
  learn what options are available for routing, add a country
  selector component to your app, and set up links that work across
  localized versions of your store.

  There are several ways to implement localization in your Shopify Hydrogen
  store, and the approach you take will depend on your project's
  requirements. This recipe uses **URL-based localization**, which makes
  market information visible in the URL. This provides two key benefits:

  - It's transparent to search engine crawlers.
  - It allows each localized version of your store to be properly indexed.

  This approach is typically implemented in two ways:

  1. Path-based localization (recommended)
      - **Example:** `example.com/fr-ca/products`
      - **Implementation:** Requires adding a locale parameter to your routes
        - Rename `routes/_index.tsx` to `routes/($locale)._index.tsx`
      - **Advantages:** No infrastructure changes needed
      - **Considerations:** Requires additional code to handle link formatting throughout your application
  2. Subdomain or top-level domain localization
      - **Example:** `fr-ca.example.com/products` (or `example.fr/products`)
      - **Implementation:** Requires infrastructure configuration
      - **Advantages:** Maintains consistent URL structure across localized stores
      - **Considerations:** More complex setup at the infrastructure level

  Although you can use other methods for localization (like cookies or HTTP headers),
  these approaches have one significant disadvantage: they're
  not visible to search engine crawlers. This can negatively impact your
  SEO for different markets.

  In this recipe, we'll implement **path-based localization**.
notes:
  - This recipe is particularly useful for existing Hydrogen projects. If you
    need to set up a brand new Hydrogen app, you can get a solid foundation by
    selecting the localization options when setting up your new project using
    the Shopify CLI. You can also use `h2 setup markets` to add localization
    support to your new Hydrogen app.
requirements: |
  - Set up your store's regions and languages using [Shopify
  Markets](https://help.shopify.com/en/manual/markets).
  - Configure your products appropriately for each market.
  - Make sure your Hydrogen app is configured to use a default `language` and
  `country code`. They will be used as the fallback when no market is explicitly
  selected.
ingredients:
  - path: templates/skeleton/app/components/CountrySelector.tsx
    description: A component that displays a country selector inside the Header.
  - path: templates/skeleton/app/components/Link.tsx
    description: A unified locale-aware Link component that handles both regular links and navigation links with active states. Automatically prepends locale prefixes and cleans menu URLs.
  - path: templates/skeleton/app/lib/i18n.ts
    description: Comprehensive i18n utilities including locale detection, path transformation hooks, URL cleaning functions, and locale validation. Centralizes all localization logic in one place.
  - path: templates/skeleton/app/routes/($locale)._index.tsx
    description: A route that renders a localized version of the home page.
  - path: templates/skeleton/app/routes/($locale).account.$.tsx
    description: Fallback route for unauthenticated account pages with locale support
  - path: templates/skeleton/app/routes/($locale).account._index.tsx
    description: Localized account dashboard redirect route
  - path: templates/skeleton/app/routes/($locale).account.addresses.tsx
    description: Customer address management page with locale-aware forms and links
  - path: templates/skeleton/app/routes/($locale).account.orders.$id.tsx
    description: Individual order details page with localized currency and date formatting
  - path: templates/skeleton/app/routes/($locale).account.orders._index.tsx
    description: Customer order history listing with locale-specific pagination
  - path: templates/skeleton/app/routes/($locale).account.profile.tsx
    description: Customer profile editing form with localized field labels
  - path: templates/skeleton/app/routes/($locale).account.tsx
    description: Account layout wrapper with locale-aware navigation tabs
  - path: templates/skeleton/app/routes/($locale).account_.authorize.tsx
    description: OAuth authorization callback route with locale preservation
  - path: templates/skeleton/app/routes/($locale).account_.login.tsx
    description: Customer login redirect with locale-specific return URL
  - path: templates/skeleton/app/routes/($locale).account_.logout.tsx
    description: Logout handler that maintains locale after sign out
  - path: templates/skeleton/app/routes/($locale).blogs.$blogHandle.$articleHandle.tsx
    description: Blog article page with locale-specific content and SEO metadata
  - path: templates/skeleton/app/routes/($locale).blogs.$blogHandle._index.tsx
    description: Blog listing page with localized article previews and pagination
  - path: templates/skeleton/app/routes/($locale).blogs._index.tsx
    description: All blogs overview page with locale-aware navigation links
  - path: templates/skeleton/app/routes/($locale).cart.tsx
    description: A localized cart route.
  - path: templates/skeleton/app/routes/($locale).collections.$handle.tsx
    description: Collection page displaying products with locale-specific pricing and availability
  - path: templates/skeleton/app/routes/($locale).collections._index.tsx
    description: Collections listing page with localized collection names and images
  - path: templates/skeleton/app/routes/($locale).collections.all.tsx
    description: All products page with locale-based filtering and sorting
  - path: templates/skeleton/app/routes/($locale).pages.$handle.tsx
    description: Dynamic page route for locale-specific content pages
  - path: templates/skeleton/app/routes/($locale).policies.$handle.tsx
    description: Policy page (privacy, terms, etc.) with locale-specific legal content
  - path: templates/skeleton/app/routes/($locale).policies._index.tsx
    description: Policies index page listing all available store policies
  - path: templates/skeleton/app/routes/($locale).products.$handle.tsx
    description: A route that renders a localized version of the product page.
  - path: templates/skeleton/app/routes/($locale).search.tsx
    description: Search results page with locale-aware product matching and predictive search
  - path: templates/skeleton/app/routes/($locale).tsx
    description: A utility route that makes sure the locale is valid.
deletedFiles:
  - templates/skeleton/app/routes/_index.tsx
  - templates/skeleton/app/routes/account.$.tsx
  - templates/skeleton/app/routes/account._index.tsx
  - templates/skeleton/app/routes/account.addresses.tsx
  - templates/skeleton/app/routes/account.orders.$id.tsx
  - templates/skeleton/app/routes/account.orders._index.tsx
  - templates/skeleton/app/routes/account.profile.tsx
  - templates/skeleton/app/routes/account.tsx
  - templates/skeleton/app/routes/account_.authorize.tsx
  - templates/skeleton/app/routes/account_.login.tsx
  - templates/skeleton/app/routes/account_.logout.tsx
  - templates/skeleton/app/routes/blogs.$blogHandle.$articleHandle.tsx
  - templates/skeleton/app/routes/blogs.$blogHandle._index.tsx
  - templates/skeleton/app/routes/blogs._index.tsx
  - templates/skeleton/app/routes/cart.tsx
  - templates/skeleton/app/routes/collections.$handle.tsx
  - templates/skeleton/app/routes/collections._index.tsx
  - templates/skeleton/app/routes/collections.all.tsx
  - templates/skeleton/app/routes/pages.$handle.tsx
  - templates/skeleton/app/routes/policies.$handle.tsx
  - templates/skeleton/app/routes/policies._index.tsx
  - templates/skeleton/app/routes/products.$handle.tsx
  - templates/skeleton/app/routes/search.tsx
steps:
  - type: INFO
    step: 1
    name: Add localization utilities and update core components
    description: In this section, we'll create utilities to handle localization and
      country selection, and update the core components to use these utilities.
  - type: PATCH
    step: "1"
    name: Update CartLineItem with locale-aware product links
    description: Update cart line items to use the unified Link component for product links
    diffs:
      - file: app/components/CartLineItem.tsx
        patchFile: CartLineItem.tsx.6dcaed.patch
  - type: NEW_FILE
    step: 1.1
    name: Create a CountrySelector component
    description: |
      Create a new `CountrySelector` component that allows users to select the locale from a dropdown of the supported locales.

      To handle redirects, use a `Form` that updates the cart buyer identity,
      which eventually redirects to the localized root of the app.
    ingredients:
      - path: templates/skeleton/app/components/CountrySelector.tsx
  - type: NEW_FILE
    step: 1.2
    name: Create a unified locale-aware Link component
    description: |
      Create a single Link component that handles both regular links and navigation links.
      This component automatically:
      - Prepends the current locale to paths
      - Supports variant="nav" for navigation links with active states
      - Cleans invalid locale prefixes from menu URLs
      - Enables locale switching while preserving paths
    ingredients:
      - path: templates/skeleton/app/components/Link.tsx
  - type: NEW_FILE
    step: 1.3
    name: Create comprehensive i18n utilities
    description: |
      Create a centralized i18n module that includes:
      1. `useSelectedLocale()` hook to get the current locale from route data
      2. `useLocalizedPath()` hook for intelligent path transformation
      3. `cleanPath()` function to remove invalid locale/language prefixes
      4. `findLocaleByPrefix()` to detect locales in paths
      5. `normalizePrefix()` for consistent prefix formatting
      6. Locale validation utilities for route params
      7. Support for case-insensitive locale matching
    ingredients:
      - path: templates/skeleton/app/lib/i18n.ts
  - type: PATCH
    step: 1.4
    name: Update ProductItem to use locale-aware Link
    description: |
      Replace standard react-router Link imports with the new unified Link component.
      This ensures all product links automatically include the correct locale prefix.
    diffs:
      - file: app/components/ProductItem.tsx
        patchFile: ProductItem.tsx.d10538.patch
  - type: PATCH
    step: 1.5
    name: Add the selected locale to the context
    description: |
      Detect the locale from the URL path, and add it to the HydrogenContext.
    diffs:
      - file: app/lib/context.ts
        patchFile: context.ts.c833ec.patch
  - type: PATCH
    step: 1.6
    name: Update Header with CountrySelector and locale-aware Links
    description: |
      1. Add the CountrySelector component to the header navigation
      2. Update all navigation links to use the unified Link component with variant="nav"
      3. Menu URLs are automatically cleaned of invalid locale prefixes
    diffs:
      - file: app/components/Header.tsx
        patchFile: Header.tsx.5672cc.patch
  - type: PATCH
    step: 1.7
    name: Add the selected locale to the root route
    description: |
      1. Include the selected locale in the root route's loader data.
      2. Make sure to redirect to the 404 page if the requested locale is not supported.
      3. Add a key prop to the `PageLayout` component to make sure it re-renders
      when the locale changes.
    diffs:
      - file: app/root.tsx
        patchFile: root.tsx.96879d.patch
  - type: INFO
    step: 2
    name: Localizing the individual routes
    description: |
      In this section, we'll add localization to the individual routes using the language [dynamic segment](https://reactrouter.com/start/data/routing#optional-segments).
  - type: PATCH
    step: "2"
    name: Update CartMain with locale-aware links
    description: Replace all Link imports to use the unified locale-aware Link component for consistent navigation
    diffs:
      - file: app/components/CartMain.tsx
        patchFile: CartMain.tsx.cf9819.patch
  - type: INFO
    step: 2.1
    name: Add language dynamic segment to the desired routes
    description: |
      To implement path-based localization, add a language
      dynamic segment to your localized routes (for example, renaming `routes/_index.tsx`
      to `routes/($locale)._index.tsx`).

      For brevity, we'll focus on the home page, the cart page, and the product page in this example. In your app, you should do this for all the app routes.
  - type: NEW_FILE
    step: 2.2
    name: Add localization to the home page
    description: |
      1. Add the dynamic segment to the home page route.
      2. Use the new `Link` component as a drop-in replacement.
    ingredients:
      - path: templates/skeleton/app/routes/($locale)._index.tsx
        renamedFrom: templates/skeleton/app/routes/_index.tsx
  - type: NEW_FILE
    step: 2.3
    name: Add localization to the cart page
    description: Add the dynamic segment to the cart page route.
    ingredients:
      - path: templates/skeleton/app/routes/($locale).cart.tsx
        renamedFrom: templates/skeleton/app/routes/cart.tsx
  - type: NEW_FILE
    step: 2.4
    name: Add localization to the product page
    description: |
      1. Add the dynamic segment to the product page route.
      2. Update the `meta` function to also update the canonical URL to use the
      localized prefix.
    ingredients:
      - path: templates/skeleton/app/routes/($locale).products.$handle.tsx
        renamedFrom: templates/skeleton/app/routes/products.$handle.tsx
  - type: NEW_FILE
    step: 2.5
    name: Add a utility route to validate the locale.
    description: |
      Add a utility route in `$(locale).tsx` that will use `localeMatchesPrefix`
      to validate the locale from the URL params. If the locale is invalid,
      the route will throw a 404 error.
    ingredients:
      - path: templates/skeleton/app/routes/($locale).tsx
  - type: PATCH
    step: 2.6
    name: Update the sitemap route's locales.
    description: |
      Update the sitemap route to use the locales included in `SUPPORTED_LOCALES`.
    diffs:
      - file: app/routes/sitemap.$type.$page[.xml].tsx
        patchFile: sitemap.$type.$page[.xml].tsx.3dae08.patch
  - type: PATCH
    step: 2.7
    name: Update the useVariantUrl function
    description: |
      Remove the `pathname` parameter from the `useVariantUrl` function, and the logic that prepends the locale to the path.
    diffs:
      - file: app/lib/variants.ts
        patchFile: variants.ts.7d506f.patch
  - type: PATCH
    step: "3"
    name: Update Footer with locale-aware navigation
    description: Update footer navigation to use Link component with variant="nav" for automatic locale handling and active states
    diffs:
      - file: app/components/Footer.tsx
        patchFile: Footer.tsx.47a7dc.patch
  - type: PATCH
    step: "5"
    name: Update PageLayout to use locale-aware Link
    description: Replace standard Link imports with the unified locale-aware component
    diffs:
      - file: app/components/PageLayout.tsx
        patchFile: PageLayout.tsx.5d2451.patch
  - type: NEW_FILE
    step: "5"
    name: app/routes/($locale).account.$.tsx
    description: null
    ingredients:
      - path: templates/skeleton/app/routes/($locale).account.$.tsx
  - type: PATCH
    step: "6"
    name: Update ProductForm navigation
    description: Update product form to use locale-aware Link component for variant selection and navigation
    diffs:
      - file: app/components/ProductForm.tsx
        patchFile: ProductForm.tsx.6dc81a.patch
  - type: NEW_FILE
    step: "6"
    name: app/routes/($locale).account._index.tsx
    description: null
    ingredients:
      - path: templates/skeleton/app/routes/($locale).account._index.tsx
  - type: NEW_FILE
    step: "7"
    name: app/routes/($locale).account.addresses.tsx
    description: null
    ingredients:
      - path: templates/skeleton/app/routes/($locale).account.addresses.tsx
  - type: PATCH
    step: "8"
    name: Update SearchResults with locale-aware links
    description: Update search result links to use the unified Link component for proper locale handling
    diffs:
      - file: app/components/SearchResults.tsx
        patchFile: SearchResults.tsx.4b9e3a.patch
  - type: NEW_FILE
    step: "8"
    name: app/routes/($locale).account.orders.$id.tsx
    description: null
    ingredients:
      - path: templates/skeleton/app/routes/($locale).account.orders.$id.tsx
  - type: PATCH
    step: "9"
    name: Update predictive search with locale-aware links
    description: Update predictive search results to use the unified Link component
    diffs:
      - file: app/components/SearchResultsPredictive.tsx
        patchFile: SearchResultsPredictive.tsx.1290da.patch
  - type: NEW_FILE
    step: "9"
    name: app/routes/($locale).account.orders._index.tsx
    description: null
    ingredients:
      - path: templates/skeleton/app/routes/($locale).account.orders._index.tsx
  - type: NEW_FILE
    step: "10"
    name: app/routes/($locale).account.profile.tsx
    description: null
    ingredients:
      - path: templates/skeleton/app/routes/($locale).account.profile.tsx
  - type: NEW_FILE
    step: "11"
    name: app/routes/($locale).account.tsx
    description: null
    ingredients:
      - path: templates/skeleton/app/routes/($locale).account.tsx
  - type: NEW_FILE
    step: "12"
    name: app/routes/($locale).account_.authorize.tsx
    description: null
    ingredients:
      - path: templates/skeleton/app/routes/($locale).account_.authorize.tsx
  - type: NEW_FILE
    step: "13"
    name: app/routes/($locale).account_.login.tsx
    description: null
    ingredients:
      - path: templates/skeleton/app/routes/($locale).account_.login.tsx
  - type: NEW_FILE
    step: "14"
    name: app/routes/($locale).account_.logout.tsx
    description: null
    ingredients:
      - path: templates/skeleton/app/routes/($locale).account_.logout.tsx
  - type: NEW_FILE
    step: "15"
    name: app/routes/($locale).blogs.$blogHandle.$articleHandle.tsx
    description: null
    ingredients:
      - path: templates/skeleton/app/routes/($locale).blogs.$blogHandle.$articleHandle.tsx
  - type: NEW_FILE
    step: "16"
    name: app/routes/($locale).blogs.$blogHandle._index.tsx
    description: null
    ingredients:
      - path: templates/skeleton/app/routes/($locale).blogs.$blogHandle._index.tsx
  - type: NEW_FILE
    step: "17"
    name: app/routes/($locale).blogs._index.tsx
    description: null
    ingredients:
      - path: templates/skeleton/app/routes/($locale).blogs._index.tsx
  - type: NEW_FILE
    step: "19"
    name: app/routes/($locale).collections.$handle.tsx
    description: null
    ingredients:
      - path: templates/skeleton/app/routes/($locale).collections.$handle.tsx
  - type: NEW_FILE
    step: "20"
    name: app/routes/($locale).collections._index.tsx
    description: null
    ingredients:
      - path: templates/skeleton/app/routes/($locale).collections._index.tsx
  - type: NEW_FILE
    step: "21"
    name: app/routes/($locale).collections.all.tsx
    description: null
    ingredients:
      - path: templates/skeleton/app/routes/($locale).collections.all.tsx
  - type: NEW_FILE
    step: "22"
    name: app/routes/($locale).pages.$handle.tsx
    description: null
    ingredients:
      - path: templates/skeleton/app/routes/($locale).pages.$handle.tsx
  - type: NEW_FILE
    step: "23"
    name: app/routes/($locale).policies.$handle.tsx
    description: null
    ingredients:
      - path: templates/skeleton/app/routes/($locale).policies.$handle.tsx
  - type: NEW_FILE
    step: "24"
    name: app/routes/($locale).policies._index.tsx
    description: null
    ingredients:
      - path: templates/skeleton/app/routes/($locale).policies._index.tsx
  - type: NEW_FILE
    step: "26"
    name: app/routes/($locale).search.tsx
    description: null
    ingredients:
      - path: templates/skeleton/app/routes/($locale).search.tsx
nextSteps: |
  - Test your implementation by going to your store and selecting a different
  market from the country selector.
  - Refer to the [Shopify
  Help Center](https://help.shopify.com/en/manual/markets) for
  more information on how to optimize and manage your international markets.
llms:
  userQueries:
    - How do I add localization support to my Hydrogen app?
    - How do I add a country selector to my Hydrogen app?
    - Set up Shopify Markets in Hydrogen
    - Help me segment my customers based on their location
  troubleshooting:
    - issue: I'm not seeing the localized content on my storefront.
      solution: In your Shopify admin, make sure you've set up your store's regions
        and langauges using Shopify Markets, then check that your products are
        appropriately configured for each market. In your Hydrogen app, make
        sure you've added the dynamic segment to the desired routes and that the
        routes are correctly named.
    - issue: Some pages are showing localized content, but others aren't.
      solution: Make sure you update *all* routes that need localization (not only the
        routes for the home page, the cart page, and the product page). See step
        2.1 for details.
commit: 859ce537a65d41cbf07a54689f0210b45f8621ba
