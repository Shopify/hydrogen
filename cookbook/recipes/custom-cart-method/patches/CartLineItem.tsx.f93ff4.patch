index 80e34be28..e5313b270 100644
--- a/templates/skeleton/app/components/CartLineItem.tsx
+++ b/templates/skeleton/app/components/CartLineItem.tsx
@@ -1,6 +1,13 @@
-import type {CartLineUpdateInput} from '@shopify/hydrogen/storefront-api-types';
+import type {
+  CartLineUpdateInput,
+  SelectedOption,
+} from '@shopify/hydrogen/storefront-api-types';
 import type {CartLayout} from '~/components/CartMain';
-import {CartForm, Image, type OptimisticCartLine} from '@shopify/hydrogen';
+import {
+  CartForm,
+  Image,
+  type OptimisticCartLine,
+} from '@shopify/hydrogen';
 import {useVariantUrl} from '~/lib/variants';
 import {Link} from 'react-router';
 import {ProductPrice} from './ProductPrice';
@@ -54,13 +61,8 @@ export function CartLineItem({
         </Link>
         <ProductPrice price={line?.cost?.totalAmount} />
         <ul>
-          {selectedOptions.map((option) => (
-            <li key={option.name}>
-              <small>
-                {option.name}: {option.value}
-              </small>
-            </li>
-          ))}
+          {/* @description Add inline product option editing in cart */}
+          <CartLineUpdateByOptionsForm line={line} />
         </ul>
         <CartLineQuantity line={line} />
       </div>
@@ -166,3 +168,94 @@ function CartLineUpdateButton({
 function getUpdateKey(lineIds: string[]) {
   return [CartForm.ACTIONS.LinesUpdate, ...lineIds].join('-');
 }
+
+// @description Component for updating cart line item options
+function CartLineUpdateByOptionsForm({line}: {line: CartLine}) {
+  const {
+    merchandise: {product, selectedOptions},
+  } = line;
+
+  // If no options or only one option value per option, don't show the form
+  const hasEditableOptions = product.options?.some(
+    (option) => option.optionValues && option.optionValues.length > 1,
+  );
+
+  if (!hasEditableOptions) {
+    return (
+      <>
+        {selectedOptions.map((option) => (
+          <li key={option.name}>
+            <small>
+              {option.name}: {option.value}
+            </small>
+          </li>
+        ))}
+      </>
+    );
+  }
+
+  return (
+    <CartForm
+      route="/cart"
+      action="CustomUpdateLineByOptions"
+      inputs={{
+        productId: product.id,
+        line: {
+          id: line.id,
+          quantity: line.quantity,
+          attributes: line.attributes,
+        },
+      }}
+    >
+      {(fetcher) => (
+        <>
+          {product.options?.map((option) => {
+            const currentValue = selectedOptions.find(
+              (selected) => selected.name === option.name,
+            )?.value;
+
+            // Skip options with only one value
+            if (!option.optionValues || option.optionValues.length <= 1) {
+              return (
+                <li key={option.name}>
+                  <small>
+                    {option.name}: {currentValue}
+                  </small>
+                </li>
+              );
+            }
+
+            return (
+              <li key={option.name}>
+                <small>
+                  {option.name}:{' '}
+                  <select
+                    name={option.name}
+                    value={currentValue}
+                    onChange={(event) => {
+                      void fetcher.submit(event.currentTarget.form, {
+                        method: 'POST',
+                      });
+                    }}
+                  >
+                    {option.optionValues.map((optionValue) => (
+                      <option
+                        key={`${option.name}-${optionValue.name}`}
+                        value={optionValue.name}
+                      >
+                        {optionValue.name}
+                      </option>
+                    ))}
+                  </select>
+                </small>
+              </li>
+            );
+          })}
+          <noscript>
+            <button type="submit">Update</button>
+          </noscript>
+        </>
+      )}
+    </CartForm>
+  );
+}
