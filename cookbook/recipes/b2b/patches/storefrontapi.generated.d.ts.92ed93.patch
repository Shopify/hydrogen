index d27c5942..afd39624 100644
--- a/templates/skeleton/storefrontapi.generated.d.ts
+++ b/templates/skeleton/storefrontapi.generated.d.ts
@@ -65,6 +65,17 @@ export type CartLineComponentFragment = Pick<
     selectedOptions: Array<
       Pick<StorefrontAPI.SelectedOption, 'name' | 'value'>
     >;
+    quantityRule: Pick<
+      StorefrontAPI.QuantityRule,
+      'maximum' | 'minimum' | 'increment'
+    >;
+    quantityPriceBreaks: {
+      nodes: Array<
+        Pick<StorefrontAPI.QuantityPriceBreak, 'minimumQuantity'> & {
+          price: Pick<StorefrontAPI.MoneyV2, 'amount' | 'currencyCode'>;
+        }
+      >;
+    };
   };
 };
 
@@ -158,6 +169,17 @@ export type CartApiQueryFragment = Pick<
             selectedOptions: Array<
               Pick<StorefrontAPI.SelectedOption, 'name' | 'value'>
             >;
+            quantityRule: Pick<
+              StorefrontAPI.QuantityRule,
+              'maximum' | 'minimum' | 'increment'
+            >;
+            quantityPriceBreaks: {
+              nodes: Array<
+                Pick<StorefrontAPI.QuantityPriceBreak, 'minimumQuantity'> & {
+                  price: Pick<StorefrontAPI.MoneyV2, 'amount' | 'currencyCode'>;
+                }
+              >;
+            };
           };
         })
     >;
@@ -722,6 +744,17 @@ export type ProductVariantFragment = Pick<
   price: Pick<StorefrontAPI.MoneyV2, 'amount' | 'currencyCode'>;
   product: Pick<StorefrontAPI.Product, 'title' | 'handle'>;
   selectedOptions: Array<Pick<StorefrontAPI.SelectedOption, 'name' | 'value'>>;
+  quantityRule: Pick<
+    StorefrontAPI.QuantityRule,
+    'maximum' | 'minimum' | 'increment'
+  >;
+  quantityPriceBreaks: {
+    nodes: Array<
+      Pick<StorefrontAPI.QuantityPriceBreak, 'minimumQuantity'> & {
+        price: Pick<StorefrontAPI.MoneyV2, 'amount' | 'currencyCode'>;
+      }
+    >;
+  };
   unitPrice?: StorefrontAPI.Maybe<
     Pick<StorefrontAPI.MoneyV2, 'amount' | 'currencyCode'>
   >;
@@ -761,6 +794,20 @@ export type ProductFragment = Pick<
               selectedOptions: Array<
                 Pick<StorefrontAPI.SelectedOption, 'name' | 'value'>
               >;
+              quantityRule: Pick<
+                StorefrontAPI.QuantityRule,
+                'maximum' | 'minimum' | 'increment'
+              >;
+              quantityPriceBreaks: {
+                nodes: Array<
+                  Pick<StorefrontAPI.QuantityPriceBreak, 'minimumQuantity'> & {
+                    price: Pick<
+                      StorefrontAPI.MoneyV2,
+                      'amount' | 'currencyCode'
+                    >;
+                  }
+                >;
+              };
               unitPrice?: StorefrontAPI.Maybe<
                 Pick<StorefrontAPI.MoneyV2, 'amount' | 'currencyCode'>
               >;
@@ -798,6 +845,17 @@ export type ProductFragment = Pick<
       selectedOptions: Array<
         Pick<StorefrontAPI.SelectedOption, 'name' | 'value'>
       >;
+      quantityRule: Pick<
+        StorefrontAPI.QuantityRule,
+        'maximum' | 'minimum' | 'increment'
+      >;
+      quantityPriceBreaks: {
+        nodes: Array<
+          Pick<StorefrontAPI.QuantityPriceBreak, 'minimumQuantity'> & {
+            price: Pick<StorefrontAPI.MoneyV2, 'amount' | 'currencyCode'>;
+          }
+        >;
+      };
       unitPrice?: StorefrontAPI.Maybe<
         Pick<StorefrontAPI.MoneyV2, 'amount' | 'currencyCode'>
       >;
@@ -822,6 +880,17 @@ export type ProductFragment = Pick<
       selectedOptions: Array<
         Pick<StorefrontAPI.SelectedOption, 'name' | 'value'>
       >;
+      quantityRule: Pick<
+        StorefrontAPI.QuantityRule,
+        'maximum' | 'minimum' | 'increment'
+      >;
+      quantityPriceBreaks: {
+        nodes: Array<
+          Pick<StorefrontAPI.QuantityPriceBreak, 'minimumQuantity'> & {
+            price: Pick<StorefrontAPI.MoneyV2, 'amount' | 'currencyCode'>;
+          }
+        >;
+      };
       unitPrice?: StorefrontAPI.Maybe<
         Pick<StorefrontAPI.MoneyV2, 'amount' | 'currencyCode'>
       >;
@@ -832,6 +901,7 @@ export type ProductFragment = Pick<
 
 export type ProductQueryVariables = StorefrontAPI.Exact<{
   country?: StorefrontAPI.InputMaybe<StorefrontAPI.CountryCode>;
+  buyer?: StorefrontAPI.InputMaybe<StorefrontAPI.BuyerInput>;
   handle: StorefrontAPI.Scalars['String']['input'];
   language?: StorefrontAPI.InputMaybe<StorefrontAPI.LanguageCode>;
   selectedOptions:
@@ -875,6 +945,23 @@ export type ProductQuery = {
                   selectedOptions: Array<
                     Pick<StorefrontAPI.SelectedOption, 'name' | 'value'>
                   >;
+                  quantityRule: Pick<
+                    StorefrontAPI.QuantityRule,
+                    'maximum' | 'minimum' | 'increment'
+                  >;
+                  quantityPriceBreaks: {
+                    nodes: Array<
+                      Pick<
+                        StorefrontAPI.QuantityPriceBreak,
+                        'minimumQuantity'
+                      > & {
+                        price: Pick<
+                          StorefrontAPI.MoneyV2,
+                          'amount' | 'currencyCode'
+                        >;
+                      }
+                    >;
+                  };
                   unitPrice?: StorefrontAPI.Maybe<
                     Pick<StorefrontAPI.MoneyV2, 'amount' | 'currencyCode'>
                   >;
@@ -912,6 +999,17 @@ export type ProductQuery = {
           selectedOptions: Array<
             Pick<StorefrontAPI.SelectedOption, 'name' | 'value'>
           >;
+          quantityRule: Pick<
+            StorefrontAPI.QuantityRule,
+            'maximum' | 'minimum' | 'increment'
+          >;
+          quantityPriceBreaks: {
+            nodes: Array<
+              Pick<StorefrontAPI.QuantityPriceBreak, 'minimumQuantity'> & {
+                price: Pick<StorefrontAPI.MoneyV2, 'amount' | 'currencyCode'>;
+              }
+            >;
+          };
           unitPrice?: StorefrontAPI.Maybe<
             Pick<StorefrontAPI.MoneyV2, 'amount' | 'currencyCode'>
           >;
@@ -936,6 +1034,17 @@ export type ProductQuery = {
           selectedOptions: Array<
             Pick<StorefrontAPI.SelectedOption, 'name' | 'value'>
           >;
+          quantityRule: Pick<
+            StorefrontAPI.QuantityRule,
+            'maximum' | 'minimum' | 'increment'
+          >;
+          quantityPriceBreaks: {
+            nodes: Array<
+              Pick<StorefrontAPI.QuantityPriceBreak, 'minimumQuantity'> & {
+                price: Pick<StorefrontAPI.MoneyV2, 'amount' | 'currencyCode'>;
+              }
+            >;
+          };
           unitPrice?: StorefrontAPI.Maybe<
             Pick<StorefrontAPI.MoneyV2, 'amount' | 'currencyCode'>
           >;
@@ -1221,7 +1330,7 @@ interface GeneratedQueryTypes {
     return: PoliciesQuery;
     variables: PoliciesQueryVariables;
   };
-  '#graphql\n  query Product(\n    $country: CountryCode\n    $handle: String!\n    $language: LanguageCode\n    $selectedOptions: [SelectedOptionInput!]!\n  ) @inContext(country: $country, language: $language) {\n    product(handle: $handle) {\n      ...Product\n    }\n  }\n  #graphql\n  fragment Product on Product {\n    id\n    title\n    vendor\n    handle\n    descriptionHtml\n    description\n    encodedVariantExistence\n    encodedVariantAvailability\n    options {\n      name\n      optionValues {\n        name\n        firstSelectableVariant {\n          ...ProductVariant\n        }\n        swatch {\n          color\n          image {\n            previewImage {\n              url\n            }\n          }\n        }\n      }\n    }\n    selectedOrFirstAvailableVariant(selectedOptions: $selectedOptions, ignoreUnknownOptions: true, caseInsensitiveMatch: true) {\n      ...ProductVariant\n    }\n    adjacentVariants (selectedOptions: $selectedOptions) {\n      ...ProductVariant\n    }\n    seo {\n      description\n      title\n    }\n  }\n  #graphql\n  fragment ProductVariant on ProductVariant {\n    availableForSale\n    compareAtPrice {\n      amount\n      currencyCode\n    }\n    id\n    image {\n      __typename\n      id\n      url\n      altText\n      width\n      height\n    }\n    price {\n      amount\n      currencyCode\n    }\n    product {\n      title\n      handle\n    }\n    selectedOptions {\n      name\n      value\n    }\n    sku\n    title\n    unitPrice {\n      amount\n      currencyCode\n    }\n  }\n\n\n': {
+  '#graphql\n  query Product(\n    $country: CountryCode\n    $buyer: BuyerInput\n    $handle: String!\n    $language: LanguageCode\n    $selectedOptions: [SelectedOptionInput!]!\n  ) @inContext(country: $country, language: $language, buyer: $buyer) {\n    product(handle: $handle) {\n      ...Product\n    }\n  }\n  #graphql\n  fragment Product on Product {\n    id\n    title\n    vendor\n    handle\n    descriptionHtml\n    description\n    encodedVariantExistence\n    encodedVariantAvailability\n    options {\n      name\n      optionValues {\n        name\n        firstSelectableVariant {\n          ...ProductVariant\n        }\n        swatch {\n          color\n          image {\n            previewImage {\n              url\n            }\n          }\n        }\n      }\n    }\n    selectedOrFirstAvailableVariant(selectedOptions: $selectedOptions, ignoreUnknownOptions: true, caseInsensitiveMatch: true) {\n      ...ProductVariant\n    }\n    adjacentVariants (selectedOptions: $selectedOptions) {\n      ...ProductVariant\n    }\n    seo {\n      description\n      title\n    }\n  }\n  #graphql\n  fragment ProductVariant on ProductVariant {\n    availableForSale\n    compareAtPrice {\n      amount\n      currencyCode\n    }\n    id\n    image {\n      __typename\n      id\n      url\n      altText\n      width\n      height\n    }\n    price {\n      amount\n      currencyCode\n    }\n    product {\n      title\n      handle\n    }\n    selectedOptions {\n      name\n      value\n    }\n    quantityRule {\n      maximum\n      minimum\n      increment\n    }\n    quantityPriceBreaks(first: 5) {\n      nodes {\n        minimumQuantity\n        price {\n          amount\n          currencyCode\n        }\n      }\n    }\n    sku\n    title\n    unitPrice {\n      amount\n      currencyCode\n    }\n  }\n\n\n': {
     return: ProductQuery;
     variables: ProductQueryVariables;
   };
